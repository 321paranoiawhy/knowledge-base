import{a3 as k,k as r,l as i,J as a,L as l,Z as s,ax as p,ag as h,j as d}from"./chunks/framework.CK7x57RQ.js";const P=JSON.parse('{"title":"格式化工具","description":"","frontmatter":{"breadcrumb":true,"pageInfo":true,"heatmap":true,"copyright":true},"headers":[],"relativePath":"docs/frontend/react-native/formatter.md","filePath":"docs/frontend/react-native/formatter.md","lastUpdated":1720519695000}'),g={name:"docs/frontend/react-native/formatter.md"},A=p('<h1 id="格式化工具" tabindex="-1">格式化工具 <a class="header-anchor" href="#格式化工具" aria-label="Permalink to &quot;格式化工具&quot;">​</a></h1><h2 id="prettier" tabindex="-1"><code>prettier</code> <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;`prettier`&quot;">​</a></h2><p>基本命令:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> prettier</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --check</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> prettier</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --write</span></span></code></pre></div><h3 id="xml-文件支持" tabindex="-1"><code>XML</code> 文件支持 <a class="header-anchor" href="#xml-文件支持" aria-label="Permalink to &quot;`XML` 文件支持&quot;">​</a></h3>',5),c=p('<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @prettier/plugin-xml</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span></span></code></pre></div><p>可运行如下命令:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> prettier</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --plugin=@prettier/plugin-xml</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --write</span></span></code></pre></div><h2 id="clang-format" tabindex="-1"><code>clang-format</code> <a class="header-anchor" href="#clang-format" aria-label="Permalink to &quot;`clang-format`&quot;">​</a></h2>',4),y=i("code",null,"clang-format",-1),o=i("code",null,"React Native",-1),D=i("code",null,"clang-format",-1),B=i("code",null,"React Native",-1),f=i("code",null,".clang-format",-1),C=p(`<p><code>clang-format</code> 可格式化以下代码文件:</p><ul><li><code>C</code></li><li><code>C++</code></li><li><code>Java</code></li><li><code>JavaScript</code></li><li><code>JSON</code></li><li><code>Objective-C</code></li><li><code>Protobuf</code></li><li><code>C#</code></li></ul><p>这里仅须对 <code>java</code> 文件格式化</p><p>如何支持 <code>kotlin</code>、<code>Swift</code>、<code>xml</code> 等文件格式化?</p><p>安装 <code>clang-format</code>, 该包由 <code>Angular</code> 团队开发和维护:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clang-format</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出格式化后的代码, 但不修改源文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clang-format</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --glob=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/android/src/main/java/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">.java</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 格式化并修改源文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clang-format</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --glob=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/android/src/main/java/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">.java</span></span></code></pre></div><h3 id="配置属性说明" tabindex="-1">配置属性说明 <a class="header-anchor" href="#配置属性说明" aria-label="Permalink to &quot;配置属性说明&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Language</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Cpp</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BasedOnStyle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">	LLVM</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 访问说明符 (public、private等) 的偏移</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AccessModifierOffset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> -4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlignAfterOpenBracket</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Align</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 连续赋值时, 对齐所有等号</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlignConsecutiveAssignments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 连续声明时, 对齐所有声明的变量名</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlignConsecutiveDeclarations</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 左对齐逃脱换行(使用反斜杠换行)的反斜杠</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlignEscapedNewlinesLeft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 水平对齐二元和三元表达式的操作数</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlignOperands</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 对齐连续的尾随的注释</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlignTrailingComments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许函数声明的所有参数在放在下一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AllowAllParametersOfDeclarationOnNextLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许短的块放在同一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AllowShortBlocksOnASingleLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许短的 case 标签放在同一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AllowShortCaseLabelsOnASingleLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中, 空函数), All</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AllowShortFunctionsOnASingleLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Empty</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许短的 if 语句保持在同一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AllowShortIfStatementsOnASingleLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许短的循环保持在同一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AllowShortLoopsOnASingleLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 总是在定义返回类型后换行 (deprecated)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlwaysBreakAfterDefinitionReturnType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> None</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 总是在返回类型后换行: None, All, TopLevel(顶级函数, 不包括在类中的函数),</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#   AllDefinitions(所有的定义, 不包括声明), TopLevelDefinitions(所有的顶级函数的定义)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlwaysBreakAfterReturnType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> None</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 总是在多行string字面量前换行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlwaysBreakBeforeMultilineStrings</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 总是在 template 声明后换行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">AlwaysBreakTemplateDeclarations</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># false 表示函数实参要么都在同一行, 要么都各自一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BinPackArguments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># false 表示所有形参要么都在同一行, 要么都各自一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BinPackParameters</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 大括号换行, 只有当 BreakBeforeBraces 设置为 Custom 时才有效</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BraceWrapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # class定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 控制语句后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterControlStatement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # enum定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterEnum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 函数定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterFunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 命名空间定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterNamespace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # ObjC定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterObjCDeclaration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # struct定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterStruct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # union定义后面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  AfterUnion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # catch之前</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  BeforeCatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # else之前</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  BeforeElse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 缩进大括号</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  IndentBraces</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BreakBeforeBinaryOperators</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> NonAssignment</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义, 与Attach类似),</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Mozilla(除枚举、函数、记录定义, 与 Attach 类似), Stroustrup(除函数定义、catch、else, 与Attach类似),</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Allman(总是在大括号前换行), GNU(总是在大括号前换行, 并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 注：这里认为语句块也属于函数</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BreakBeforeBraces</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Custom</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在三元运算符前换行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BreakBeforeTernaryOperators</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在构造函数的初始化列表的逗号前换行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">BreakConstructorInitializersBeforeComma</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 每行字符的限制, 0 表示没有限制</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ColumnLimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 描述具有特殊意义的注释的正则表达式, 它不应该被分割为多行或以其它方式改变</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">CommentPragmas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^ IWYU pragma:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构造函数的初始化列表要么都在同一行, 要么都各自一行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ConstructorInitializerAllOnOneLineOrOnePerLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构造函数的初始化列表的缩进宽度</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ConstructorInitializerIndentWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 延续的行的缩进宽度</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ContinuationIndentWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 去除 C++11 的列表初始化的大括号{后和}前的空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Cpp11BracedListStyle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 继承最常用的指针和引用的对齐方式</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">DerivePointerAlignment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 关闭格式化</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">DisableFormat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ExperimentalAutoDetectBinPacking</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 需要被解读为 foreach 循环而不是函数调用的宏</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ForEachMacros</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">foreach</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Q_FOREACH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BOOST_FOREACH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 对 #include 进行排序, 匹配了某正则表达式的#include拥有对应的优先级, 匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前),</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#   可以定义负数优先级从而保证某些#include永远在最前面</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">IncludeCategories</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Regex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^&quot;(llvm|llvm-c|clang|clang-c)/</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    Priority</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Regex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^(&lt;|&quot;(gtest|isl|json)/)</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    Priority</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Regex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.*</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    Priority</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 缩进 case 标签</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">IndentCaseLabels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 缩进宽度</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">IndentWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 函数返回类型换行时, 缩进函数声明或函数定义的函数名</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">IndentWrappedFunctionNames</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 保留在块开始处的空行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">KeepEmptyLinesAtTheStartOfBlocks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开始一个块的宏的正则表达式</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">MacroBlockBegin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 结束一个块的宏的正则表达式</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">MacroBlockEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 连续空行的最大数量</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">MaxEmptyLinesToKeep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">NamespaceIndentation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Inner</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用 ObjC 块时缩进宽度</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ObjCBlockIndentWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在 ObjC 的 @property 后添加一个空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ObjCSpaceAfterProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在 ObjC 的 protocol 列表前添加一个空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ObjCSpaceBeforeProtocolList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在 call(后对函数调用换行的 penalty)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PenaltyBreakBeforeFirstCallParameter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 19</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在一个注释中引入换行的 penalty</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PenaltyBreakComment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 300</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 第一次在 &lt;&lt; 前换行的 penalty</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PenaltyBreakFirstLessLess</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 120</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在一个字符串字面量中引入换行的 penalty</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PenaltyBreakString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 对于每个在行字符数限制之外的字符的 penalty</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PenaltyExcessCharacter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 将函数的返回类型放到它自己的行的 penalty</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PenaltyReturnTypeOnItsOwnLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指针和引用的对齐: Left, Right, Middle</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">PointerAlignment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Left</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许重新排版注释</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ReflowComments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 允许排序 #include</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SortIncludes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在C风格类型转换后添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpaceAfterCStyleCast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在赋值运算符之前添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpaceBeforeAssignmentOperators</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开圆括号之前添加一个空格: Never, ControlStatements, Always</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpaceBeforeParens</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ControlStatements</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在空的圆括号中添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpaceInEmptyParentheses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在尾随的评论前添加的空格数(只适用于//)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpacesBeforeTrailingComments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在尖括号的&lt;后和&gt;前添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpacesInAngles</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在容器(ObjC 和 JavaScript 的数组和字典等)字面量中添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpacesInContainerLiterals</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在 C 风格类型转换的括号中添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpacesInCStyleCastParentheses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在圆括号的(后和)前添加空格</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpacesInParentheses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在方括号的[后和]前添加空格, lambda 表达式和未指明大小的数组的声明不受影响</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpacesInSquareBrackets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 标准: Cpp03, Cpp11, Auto</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Standard</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Cpp11</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># tab 宽度</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">TabWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用 tab 字符: Never, ForIndentation, ForContinuationAndIndentation, Always</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">UseTab</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Never</span></span></code></pre></div><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><p><code>clang-format</code> 配置文件为 <code>.clang-format</code></p><p>使用 <code>BasedOnStyle</code>:</p><div class="language-.clang-format vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">.clang-format</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>Language:        JavaScript</span></span>
<span class="line"><span>BasedOnStyle:    Google</span></span>
<span class="line"><span>ColumnLimit:     100</span></span></code></pre></div><p>或针对每一个属性单独配置, 此时配置文件会显得较为冗长</p><h2 id="spotless" tabindex="-1"><code>spotless</code> <a class="header-anchor" href="#spotless" aria-label="Permalink to &quot;\`spotless\`&quot;">​</a></h2>`,15);function u(m,b,v,_,E,F){const n=h("VPNolebaseInlineLinkPreview"),t=h("NolebaseGitContributors"),e=h("NolebaseGitChangelog");return d(),r("div",null,[A,i("ul",null,[i("li",null,[a(n,{href:"https://github.com/prettier/plugin-xml",target:"_blank",rel:"noreferrer"},{default:l(()=>[s("@prettier/plugin-xml")]),_:1})]),i("li",null,[a(n,{href:"https://github.com/prettier/plugin-xml?tab=readme-ov-file#configuration",target:"_blank",rel:"noreferrer"},{default:l(()=>[s("Configuration")]),_:1})])]),c,i("ul",null,[i("li",null,[a(n,{href:"https://clang.llvm.org/docs/ClangFormat.html",target:"_blank",rel:"noreferrer"},{default:l(()=>[s("clang-format docs")]),_:1}),s(),y,s(" 官方文档")]),i("li",null,[a(n,{href:"https://github.com/facebook/hermes/blob/main/doc/CodingStandards.md#format-your-code",target:"_blank",rel:"noreferrer"},{default:l(()=>[s("Format your code")]),_:1}),s(),o,s(" 推荐使用 "),D,s(" 工具格式化代码")]),i("li",null,[a(n,{href:"https://github.com/facebook/hermes/blob/main/.clang-format",target:"_blank",rel:"noreferrer"},{default:l(()=>[s(".clang-format")]),_:1}),s(),B,s(" 官方仓库 "),f,s(" 文件参考")]),i("li",null,[a(n,{href:"https://www.electronjs.org/docs/latest/development/clang-format",target:"_blank",rel:"noreferrer"},{default:l(()=>[s("Using clang-format on C++ Code")]),_:1})])]),C,i("ul",null,[i("li",null,[a(n,{href:"https://github.com/diffplug/spotless",target:"_blank",rel:"noreferrer"},{default:l(()=>[s("spotless")]),_:1})])]),a(t),a(e)])}const O=k(g,[["render",u]]);export{P as __pageData,O as default};
