import{_ as d,i as s,A as e,N as r,p as o,l as t,ab as c,J as a,h as u}from"./chunks/framework.DriGdB-O.js";const y=JSON.parse('{"title":"Coding Guide 代码指南","description":"","frontmatter":{"breadcrumb":true,"pageInfo":true,"heatmap":true,"copyright":true},"headers":[],"relativePath":"docs/frontend/代码指南/README.md","filePath":"docs/frontend/代码指南/README.md","lastUpdated":1718193409000}'),h={name:"docs/frontend/代码指南/README.md"},g=e("h1",{id:"coding-guide-代码指南",tabindex:"-1"},[t("Coding Guide 代码指南 "),e("a",{class:"header-anchor",href:"#coding-guide-代码指南","aria-label":'Permalink to "Coding Guide 代码指南"'},"​")],-1),f=e("p",null,[e("strong",null,"绿环"),t("代码指南, 具体规则如下:")],-1),p=e("h2",{id:"参考规范",tabindex:"-1"},[t("参考规范 "),e("a",{class:"header-anchor",href:"#参考规范","aria-label":'Permalink to "参考规范"'},"​")],-1),_=e("h2",{id:"推荐阅读",tabindex:"-1"},[t("推荐阅读 "),e("a",{class:"header-anchor",href:"#推荐阅读","aria-label":'Permalink to "推荐阅读"'},"​")],-1),m=e("h3",{id:"算法",tabindex:"-1"},[t("算法 "),e("a",{class:"header-anchor",href:"#算法","aria-label":'Permalink to "算法"'},"​")],-1),b=e("h3",{id:"设计模式",tabindex:"-1"},[t("设计模式 "),e("a",{class:"header-anchor",href:"#设计模式","aria-label":'Permalink to "设计模式"'},"​")],-1),P=c('<h3 id="三大编程范式" tabindex="-1">三大编程范式 <a class="header-anchor" href="#三大编程范式" aria-label="Permalink to &quot;三大编程范式&quot;">​</a></h3><ul><li><code>SP (Structrued Programming)</code> <strong>结构化编程</strong></li><li><code>OOP (Object Oriented Programming)</code> <strong>面向对象编程</strong></li><li><code>FP (Functional Programming)</code> <strong>函数式编程</strong></li></ul><h3 id="软件设计五大原则" tabindex="-1">软件设计五大原则 <a class="header-anchor" href="#软件设计五大原则" aria-label="Permalink to &quot;软件设计五大原则&quot;">​</a></h3><ul><li><p><code>SRP</code> (Single Responsibility Principle) <strong>单一职责</strong>原则</p><p>一个模块应只有一个功能。</p></li><li><p><code>OCP</code> (Open Closed Principle) <strong>开闭</strong>原则</p><p>系统应预留接口, 以便在不修改原有代码的情况下进行功能扩展。</p></li><li><p><code>LSP</code> (Liskov Substitution Principle) <strong>里氏替换</strong>原则</p><p>子类不能改变父类的语义, 能用父类的地方, 一定也能用子类。</p></li><li><p><code>ISP</code> (Interface Segregation Principle) <strong>接口隔离</strong>原则</p><p>客户端不应被迫使用对其而言无用的方法或功能, 应尽量将接口拆分成更小的、更具体的接口。</p></li><li><p><code>DIP</code> (Dependence Inversion Principle) <strong>依赖反转</strong>原则, <code>DI</code> (<code>Dependency Injection</code> 依赖注入) 和 <code>IOC</code> (<code>Inversion of Control</code> 控制反转)</p><p>设计代码结构时, 高层模块不应该依赖底层模块, 二者都应该依赖其抽象。 抽象不应该依赖细节, 细节应该依赖抽象。</p></li></ul><h3 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h3><ul><li><code>DDD (Domain Driven Design)</code> 领域驱动设计</li><li><code>TDD (Test Driven Design)</code> 测试驱动设计</li><li><code>BDD (Behavior Driven Design)</code> 行为驱动设计</li></ul>',6);function C(S,k,w,D,v,A){const l=a("VPNolebaseInlineLinkPreview"),n=a("NolebaseGitContributors"),i=a("NolebaseGitChangelog");return u(),s("div",null,[g,f,e("ul",null,[e("li",null,[r(l,{href:"./coding-style"},{default:o(()=>[t("Coding Style 代码风格")]),_:1})]),e("li",null,[r(l,{href:"./css"},{default:o(()=>[t("CSS")]),_:1})]),e("li",null,[r(l,{href:"./directory-structure"},{default:o(()=>[t("Directory Structure 项目目录结构")]),_:1})]),e("li",null,[r(l,{href:"./git"},{default:o(()=>[t("Git")]),_:1})]),e("li",null,[r(l,{href:"./html"},{default:o(()=>[t("HTML")]),_:1})]),e("li",null,[r(l,{href:"./js"},{default:o(()=>[t("JavaScript")]),_:1})]),e("li",null,[r(l,{href:"./react"},{default:o(()=>[t("React")]),_:1})]),e("li",null,[r(l,{href:"./tools"},{default:o(()=>[t("Tools 代码检查/格式化等工具")]),_:1})]),e("li",null,[r(l,{href:"./ts"},{default:o(()=>[t("TypeScript")]),_:1})]),e("li",null,[r(l,{href:"./vitepress"},{default:o(()=>[t("Vitepress")]),_:1})]),e("li",null,[r(l,{href:"./vue"},{default:o(()=>[t("Vue")]),_:1})])]),p,e("ul",null,[e("li",null,[r(l,{href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Airbnb JavaScript Style Guide")]),_:1})]),e("li",null,[r(l,{href:"https://github.com/google/styleguide",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Google Style Guide")]),_:1})]),e("li",null,[r(l,{href:"https://google.github.io/styleguide/htmlcssguide.html",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Google HTML/CSS Style Guide")]),_:1})]),e("li",null,[r(l,{href:"https://google.github.io/styleguide/jsguide.html",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Google JavaScript Style Guide")]),_:1})])]),_,e("ul",null,[e("li",null,[r(l,{href:"https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Clean Code")]),_:1}),t(" 《代码整洁之道》")]),e("li",null,[r(l,{href:"https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Refactoring: Improving the Design of Existing Code")]),_:1}),t(" 《重构: 改善既有代码》")]),e("li",null,[r(l,{href:"https://www.amazon.com/Algorithms-Algorithms_4-Robert-Sedgewick-ebook/dp/B004P8J1NA",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Algorithms")]),_:1}),t(" 《算法》")]),e("li",null,[r(l,{href:"https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Code Complete: A Practical Handbook of Software Construction")]),_:1}),t("《代码大全》")]),e("li",null,[r(l,{href:"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Clean Architecture")]),_:1}),t(" 《架构整洁之道》")])]),m,e("ul",null,[e("li",null,[r(l,{href:"https://www.hello-algo.com/",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Hello 算法")]),_:1})])]),b,e("ul",null,[e("li",null,[r(l,{href:"https://refactoring.guru/design-patterns",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("Design Patterns - refactoring.guru")]),_:1})]),e("li",null,[r(l,{href:"https://www.patterns.dev/",target:"_blank",rel:"noreferrer"},{default:o(()=>[t("patterns.dev")]),_:1})])]),P,r(n),r(i)])}const G=d(h,[["render",C]]);export{y as __pageData,G as default};
